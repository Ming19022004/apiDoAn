const { GoogleGenerativeAI } = require("@google/generative-ai");
const { Product, Category } = require('../models');
const { Op } = require('sequelize');

const GEMINI_API_KEY = process.env.GEMINI_API_KEY || "AIzaSyB_OdCkwSuXvgGoqk_xOsE42k7_bkXqz8A";
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

const URL_CLIENT_BASE = process.env.URL_CLIENT_BASE;

// L·∫•y th√¥ng tin s·∫£n ph·∫©m v√† danh m·ª•c t·ª´ database
const getProductData = async () => {
  try {
    const products = await Product.findAll({
      where: { status: true },
      include: [
        {
          model: Category,
          as: 'category',
          attributes: ['name']
        }
      ],
      attributes: ['id', 'name', 'description', 'price', 'image', 'category_id'],
      limit: 50 // Gi·ªõi h·∫°n ƒë·ªÉ tr√°nh prompt qu√° d√†i
    });

    const categories = await Category.findAll({
      attributes: ['id', 'name', 'image']
    });

    return {
      products: products.map(p => ({
        id: p.id,
        name: p.name,
        description: p.description,
        price: p.price,
        image: p.image,
        category: p.category?.name || 'Kh√¥ng ph√¢n lo·∫°i'
      })),
      categories: categories.map(c => ({
        id: c.id,
        name: c.name,
        image: c.image
      }))
    };
  } catch (error) {
    console.error('Error fetching product data:', error);
    return { products: [], categories: [] };
  }
};

// T·∫°o prompt cho AI v·ªõi context v·ªÅ c·ª≠a h√†ng v√† s·∫£n ph·∫©m
const createPrompt = (userMessage, productData) => {
  const { products, categories } = productData;
  
  const productList = products.map(p => 
    `- ${p.name} (${p.category}): ${p.price}ƒë - ${p.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}`
  ).join('\n');

  const categoryList = categories.map(c => 
    `- ${c.name} (ID: ${c.id})${c.image ? ` (c√≥ h√¨nh ·∫£nh)` : ''}`
  ).join('\n');

  return `B·∫°n l√† tr·ª£ l√Ω ·∫£o c·ªßa c·ª≠a h√†ng "M·∫∏ X√çU" - chuy√™n b√°n c√°c s·∫£n ph·∫©m s·ªØa v√† th·ª±c ph·∫©m cho m·∫π v√† b√© t·∫°i ƒê√† N·∫µng.

TH√îNG TIN C·ª¨A H√ÄNG:
- T√™n: M·∫∏ X√çU - Th·∫ø gi·ªõi s·ªØa m·∫π x√≠u
- Hotline: 0906532932
- CSKH: 0902741222 (Zalo), 0798932932 (Zalo)
- ƒê·ªãa ch·ªâ: 84 √Çu C∆°, Ho√† Kh√°nh B·∫Øc, Li√™n Chi·ªÉu, ƒê√† N·∫µng
- Ship COD to√†n qu·ªëc, ph√≠ ship 15k-30k t√πy ƒë·ªãa ch·ªâ
- Th·ªùi gian giao h√†ng: 1-3 ng√†y

DANH M·ª§C S·∫¢N PH·∫®M:
${categoryList}

S·∫¢N PH·∫®M HI·ªÜN C√ì:
${productList}

H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
1. Lu√¥n th√¢n thi·ªán, nhi·ªát t√¨nh, s·ª≠ d·ª•ng emoji ph√π h·ª£p
2. Khi kh√°ch h·ªèi v·ªÅ c√≥ nh·ªØng danh m·ª•c n√†o hay c√≥ nh·ªØng s·∫£n ph·∫©m n√†o, tr·∫£ v·ªÅ ƒë∆∞·ªùng link: "${URL_CLIENT_BASE}/products"
3. Khi kh√°ch h·ªèi v·ªÅ s·∫£n ph·∫©m ho·∫∑c danh m·ª•c c·ª• th·ªÉ, tr·∫£ v·ªÅ ƒë∆∞·ªùng link: "${URL_CLIENT_BASE}/products?category=[ID_DANH_M·ª§C]"
4. Khi kh√°ch h·ªèi v·ªÅ s·∫£n ph·∫©m c·ª• th·ªÉ, tr·∫£ v·ªÅ ƒë∆∞·ªùng link: "${URL_CLIENT_BASE}/products/[ID_S·∫¢N_PH·∫®M]"
5. Khi kh√°ch h·ªèi v·ªÅ t·∫•t c·∫£ s·∫£n ph·∫©m, tr·∫£ v·ªÅ: "${URL_CLIENT_BASE}/products"
6. Khi kh√°ch h·ªèi v·ªÅ gi√°, ship, ƒë·∫∑t h√†ng: h∆∞·ªõng d·∫´n c·ª• th·ªÉ
7. Khi kh√°ch h·ªèi v·ªÅ li√™n h·ªá: cung c·∫•p th√¥ng tin hotline v√† ƒë·ªãa ch·ªâ
8. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin
9. N·∫øu kh√°ch h·ªèi v·ªÅ s·∫£n ph·∫©m kh√¥ng c√≥ trong danh s√°ch, g·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª± v√† ƒë∆∞a link
10. Lu√¥n k·∫øt th√∫c b·∫±ng l·ªùi m·ªùi li√™n h·ªá ho·∫∑c ƒë·∫∑t h√†ng

C√ÇU H·ªéI C·ª¶A KH√ÅCH: "${userMessage}"

H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n v√† h·ªØu √≠ch:`;
};

// H√†m t·ª± ƒë·ªông b·ªçc m·ªçi link s·∫£n ph·∫©m v√† s·ªë Zalo b·∫±ng th·∫ª <a> c√≥ class tailwind
function formatLinks(text) {
  if (!text) return text;
  // Regex ƒë·ªông cho URL client base
  const escapedBase = URL_CLIENT_BASE.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
  const productRegex = new RegExp(`(${escapedBase}/products(\\?category=\\d+)?)`, 'g');
  let result = text.replace(productRegex, (match) => {
    let display = 'Xem t·∫•t c·∫£ s·∫£n ph·∫©m';
    if (match.includes('?category=')) display = 'Xem s·∫£n ph·∫©m danh m·ª•c n√†y';
    return `<a href='${match}' target='_blank' class='text-blue-600 underline hover:text-blue-800'>${display}</a>`;
  });
  // B·ªçc t·∫•t c·∫£ s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá th√†nh link Zalo (tr√°nh b·ªçc l·ªìng nhau)
  // Kh√¥ng b·ªçc n·∫øu ƒë√£ n·∫±m trong th·∫ª a
  result = result.replace(/(?<!href="https:\/\/zalo\.me\/)(0[35789]\d{8}|01\d{9}|02\d{9}|04\d{8})/g, (phone) => {
    return `<a href="https://zalo.me/${phone}" target="_blank" class="text-blue-600 underline hover:text-blue-800">${phone}</a>`;
  });
  return result;
}

// X·ª≠ l√Ω tin nh·∫Øn v·ªõi AI
const processMessageWithAI = async (userMessage) => {
  try {
    // L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ database
    const productData = await getProductData();
    
    // Ki·ªÉm tra xem c√≥ ph·∫£i h·ªèi v·ªÅ danh m·ª•c c·ª• th·ªÉ kh√¥ng
    const categoryMatch = findCategoryMatch(userMessage, productData.categories);
    if (categoryMatch) {
      return formatLinks(`Ch√∫ng t√¥i c√≥ danh m·ª•c "${categoryMatch.name}" v·ªõi nhi·ªÅu s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng! B·∫°n c√≥ th·ªÉ xem chi ti·∫øt t·∫°i: ${URL_CLIENT_BASE}/products?category=${categoryMatch.id} üõçÔ∏è<br/><br/>Ho·∫∑c g·ªçi hotline 0906532932 ho·∫∑c Zalo 0902741222/ 0798932932 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp! üìû`);
    }
    
    // Ki·ªÉm tra xem c√≥ ph·∫£i h·ªèi v·ªÅ t·∫•t c·∫£ s·∫£n ph·∫©m kh√¥ng
    if (isAskingForAllProducts(userMessage)) {
      return formatLinks(`Ch√∫ng t√¥i c√≥ ƒë·∫ßy ƒë·ªß c√°c lo·∫°i s·∫£n ph·∫©m s·ªØa v√† th·ª±c ph·∫©m cho m·∫π v√† b√©! B·∫°n c√≥ th·ªÉ xem t·∫•t c·∫£ s·∫£n ph·∫©m t·∫°i: ${URL_CLIENT_BASE}/products ü•õ<br/><br/>Ho·∫∑c g·ªçi hotline 0906532932 ho·∫∑c Zalo 0902741222/ 0798932932 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp! üìû`);
    }
    
    // T·∫°o prompt v·ªõi context
    const prompt = createPrompt(userMessage, productData);
    
    // G·ªçi AI
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const aiResponse = response.text();
    
    return formatLinks(aiResponse.trim());
  } catch (error) {
    console.error('AI processing error:', error);
    
    // Fallback responses n·∫øu AI l·ªói
    const fallbackResponses = {
      greeting: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa M·∫π X√≠u. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ s·∫£n ph·∫©m, ƒë·∫∑t h√†ng ho·∫∑c h·ªó tr·ª£ kh√°c. B·∫°n c·∫ßn g√¨ ·∫°? üòä',
      product: 'Ch√∫ng t√¥i c√≥ nhi·ªÅu lo·∫°i s·∫£n ph·∫©m s·ªØa ch·∫•t l∆∞·ª£ng cao nh∆∞ s·ªØa t∆∞∆°i, s·ªØa ƒë·∫∑c, s·ªØa chua, s·ªØa b·ªôt... B·∫°n c√≥ th·ªÉ xem chi ti·∫øt t·∫°i: ${URL_CLIENT_BASE}/products ü•õ',
      order: 'ƒê·ªÉ ƒë·∫∑t h√†ng, b·∫°n c√≥ th·ªÉ:\n1. Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng\n2. V√†o trang Gi·ªè h√†ng\n3. Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n\n4. X√°c nh·∫≠n ƒë∆°n h√†ng\n\nHo·∫∑c g·ªçi hotline 0906532932 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp! üìû',
      shipping: 'Ch√∫ng t√¥i ship COD to√†n qu·ªëc! Th·ªùi gian giao h√†ng t·ª´ 1-3 ng√†y t√πy khu v·ª±c. Ph√≠ ship t·ª´ 15k-30k t√πy ƒë·ªãa ch·ªâ. B·∫°n c√≥ mu·ªën t√¥i h∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng kh√¥ng? üöö',
      contact: 'B·∫°n c√≥ th·ªÉ li√™n h·ªá ch√∫ng t√¥i qua:\nüìû Hotline: 0906532932\nüìû CSKH: <a href="https://zalo.me/0902741222" target="_blank" class="text-blue-600 underline hover:text-blue-800">0902741222 (Zalo)</a>\nüìû CSKH: <a href="https://zalo.me/0798932932" target="_blank" class="text-blue-600 underline hover:text-blue-800">0798932932 (Zalo)</a>\n\nHo·∫∑c ƒë·∫øn tr·ª±c ti·∫øp c√°c c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i! üè™',
      default: 'Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ s·∫£n ph·∫©m, ƒë·∫∑t h√†ng, v·∫≠n chuy·ªÉn ho·∫∑c li√™n h·ªá. T√¥i s·∫Ω c·ªë g·∫Øng h·ªó tr·ª£ t·ªët nh·∫•t! ü§î'
    };

    // Ph√¢n lo·∫°i c√¢u h·ªèi ƒë·ªÉ tr·∫£ v·ªÅ response ph√π h·ª£p
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('xin ch√†o') || lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
      return formatLinks(fallbackResponses.greeting);
    }
    
    if (lowerMessage.includes('s·∫£n ph·∫©m') || lowerMessage.includes('mua') || lowerMessage.includes('gi√°')) {
      return formatLinks(fallbackResponses.product);
    }
    
    if (lowerMessage.includes('ƒë·∫∑t h√†ng') || lowerMessage.includes('mua h√†ng') || lowerMessage.includes('thanh to√°n')) {
      return formatLinks(fallbackResponses.order);
    }
    
    if (lowerMessage.includes('ship') || lowerMessage.includes('giao h√†ng') || lowerMessage.includes('v·∫≠n chuy·ªÉn')) {
      return formatLinks(fallbackResponses.shipping);
    }
    
    if (lowerMessage.includes('li√™n h·ªá') || lowerMessage.includes('hotline') || lowerMessage.includes('s·ªë ƒëi·ªán tho·∫°i')) {
      return formatLinks(fallbackResponses.contact);
    }
    
    return formatLinks(fallbackResponses.default);
  }
};

// T√¨m danh m·ª•c ph√π h·ª£p v·ªõi tin nh·∫Øn ng∆∞·ªùi d√πng
const findCategoryMatch = (userMessage, categories) => {
  const lowerMessage = userMessage.toLowerCase();
  
  for (const category of categories) {
    const categoryName = category.name.toLowerCase();
    if (lowerMessage.includes(categoryName)) {
      return category;
    }
  }
  
  return null;
};

// Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ h·ªèi v·ªÅ t·∫•t c·∫£ s·∫£n ph·∫©m kh√¥ng
const isAskingForAllProducts = (userMessage) => {
  const lowerMessage = userMessage.toLowerCase();
  const keywords = [
    't·∫•t c·∫£ s·∫£n ph·∫©m', 't·∫•t c·∫£', 'xem s·∫£n ph·∫©m', 'danh s√°ch s·∫£n ph·∫©m',
    's·∫£n ph·∫©m g√¨', 'c√≥ g√¨', 'b√°n g√¨', 'm·∫∑t h√†ng', 'h√†ng h√≥a'
  ];
  
  return keywords.some(keyword => lowerMessage.includes(keyword));
};

// T√¨m ki·∫øm s·∫£n ph·∫©m theo t·ª´ kh√≥a
const searchProducts = async (query) => {
  try {
    const products = await Product.findAll({
      where: {
        status: true,
        [Op.or]: [
          { name: { [Op.like]: `%${query}%` } },
          { description: { [Op.like]: `%${query}%` } }
        ]
      },
      include: [
        {
          model: Category,
          as: 'category',
          attributes: ['name']
        }
      ],
      attributes: ['id', 'name', 'description', 'price', 'image'],
      limit: 10
    });

    return products.map(p => ({
      id: p.id,
      name: p.name,
      description: p.description,
      price: p.price,
      image: p.image,
      category: p.category?.name || 'Kh√¥ng ph√¢n lo·∫°i'
    }));
  } catch (error) {
    console.error('Error searching products:', error);
    return [];
  }
};

// G·ª£i √Ω s·∫£n ph·∫©m theo danh m·ª•c
const suggestProductsByCategory = async (categoryName) => {
  try {
    const category = await Category.findOne({
      where: {
        name: { [Op.like]: `%${categoryName}%` }
      }
    });

    if (!category) {
      return [];
    }

    const products = await Product.findAll({
      where: {
        category_id: category.id,
        status: true
      },
      attributes: ['id', 'name', 'description', 'price', 'image'],
      limit: 5
    });

    return products.map(p => ({
      id: p.id,
      name: p.name,
      description: p.description,
      price: p.price,
      image: p.image,
      category: category.name
    }));
  } catch (error) {
    console.error('Error suggesting products by category:', error);
    return [];
  }
};

module.exports = {
  processMessageWithAI,
  searchProducts,
  suggestProductsByCategory,
  getProductData,
  findCategoryMatch,
  isAskingForAllProducts
}; 